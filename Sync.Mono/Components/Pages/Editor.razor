@page "/editor"
@page "/editor/{EditorId}"
@using Sync.Mono.Services
@using Sync.Mono.Models
@using System.Text.Json
@using System.Net.WebSockets
@inject IEditorService EditorService
@inject WebSocketService WebSocketService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Sync</PageTitle>

<div class="main-container full-screen">
    @if (_isLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>Loading...</p>
        </div>
    }
    else if (_editorState == null)
    {
        <div class="welcome-container">
            <div class="welcome-card">
                <div class="welcome-body">
                    <button class="btn btn-primary" @onclick="JoinOrCreateSession">Create session</button>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="editor-container">
            <div class="editor-wrapper">
                <div class="editor-header">
                    <div class="header-left">
                        <div class="cut-copy-buttons">
                            <button class="btn-dark btn-blue" @onclick="CutContent">CUT</button>
                            <button class="btn-dark btn-blue" @onclick="CopyContent">COPY</button>
                        </div>
                        <div class="session-info">
                            <div class="connection-info">
                                <span class="connection-indicator @(_connectionStatus == "Connected" ? "connected" : "disconnected")"></span>
                                <span class="connection-text">@_connectionStatus</span>
                            </div>
                        </div>
                    </div>

                    <div class="header-right">
                        <div class="language-selector">
                            <select id="language-select" @bind="_selectedLanguage" @bind:after="OnLanguageChangeAsync" class="dark-select">
                                <option value="csharp">C#</option>
                                <option value="javascript">JavaScript</option>
                                <option value="typescript">TypeScript</option>
                                <option value="html">HTML</option>
                                <option value="css">CSS</option>
                                <option value="java">Java</option>
                                <option value="python">Python</option>
                                <option value="json">JSON</option>
                                <option value="plaintext">Plain Text</option>
                            </select>
                        </div>

                        <div class="users-info">
                            <span class="users-count">@_editorState.ConnectedUsers.Count users</span>
                            <div class="users-dropdown">
                                <div class="dropdown-content">
                                    @foreach (var user in _editorState.ConnectedUsers)
                                    {
                                        <div class="user-item">
                                            <span class="user-icon">ðŸ‘¤</span>
                                            <span class="user-name">@user</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <button class="btn-dark btn-exit" @onclick="DisconnectAndReset">Exit</button>
                    </div>
                </div>
                <div class="editor-content">
                    <textarea @bind="_content" @bind:event="oninput"
                             @onkeyup="OnContentChanged"
                             class="code-editor"
                             spellcheck="false"
                             tabindex="0"></textarea>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? EditorId { get; set; }

    private EditorState? _editorState;
    private string _content = string.Empty;
    private string _selectedLanguage = "csharp";
    private string _editorIdInput = string.Empty;
    private string _userIdInput = string.Empty;
    private string _connectionStatus = "Disconnected";
    private bool _isLoading = true;
    private bool _isEditorReady = false;
    private bool _isProcessingChange = false;
    private string _userId = string.Empty;
    private Timer? _syncTimer;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isEditorReady = true;

            if (!string.IsNullOrEmpty(EditorId))
            {
                _userId = $"user_{Guid.NewGuid().ToString()[..8]}";
                try
                {
                    _editorState = await EditorService.GetEditorStateAsync(EditorId);
                    _content = _editorState.Content;
                    _selectedLanguage = _editorState.Language;

                    await EditorService.AddConnectedUserAsync(EditorId, _userId);
                    _connectionStatus = "Connected";

                    StartSyncTimer();
                }
                catch (KeyNotFoundException)
                {
                    var newEditor = await EditorService.CreateEditorStateAsync(EditorId);
                    await EditorService.AddConnectedUserAsync(newEditor.Id, _userId);
                    await EditorService.SetLanguageAsync(newEditor.Id, _selectedLanguage);

                    EditorId = newEditor.Id;
                    _editorState = newEditor;
                    _connectionStatus = "Connected";

                    StartSyncTimer();

                    NavigationManager.NavigateTo($"/editor/{EditorId}", replace: true);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error initializing editor: {ex.Message}");
                    _editorState = null;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Global error in OnInitializedAsync: {ex.Message}");
            _editorState = null;
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void StartSyncTimer()
    {
        _syncTimer = new Timer(async _ =>
        {
            try
            {
                if (_editorState != null && !string.IsNullOrEmpty(_editorState.Id))
                {
                    var updatedState = await EditorService.GetEditorStateAsync(_editorState.Id);

                    if (!_isProcessingChange && updatedState.Content != _content)
                    {
                        _isProcessingChange = true;
                        _content = updatedState.Content;
                        _isProcessingChange = false;

                        await InvokeAsync(StateHasChanged);
                    }

                    if (updatedState.Language != _selectedLanguage)
                    {
                        _selectedLanguage = updatedState.Language;
                        await InvokeAsync(StateHasChanged);
                    }

                    if (!_editorState.ConnectedUsers.SetEquals(updatedState.ConnectedUsers))
                    {
                        _editorState.ConnectedUsers = updatedState.ConnectedUsers;
                        await InvokeAsync(StateHasChanged);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in sync timer: {ex.Message}");
            }
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private async Task JoinOrCreateSession()
    {
        _isLoading = true;

        try
        {
            string editorId;

            if (string.IsNullOrWhiteSpace(_editorIdInput))
            {
                var newEditor = await EditorService.CreateEditorStateAsync();
                editorId = newEditor.Id;
            }
            else
            {
                editorId = _editorIdInput;
            }

            _userId = string.IsNullOrWhiteSpace(_userIdInput)
                ? $"user_{Guid.NewGuid().ToString()[..8]}"
                : _userIdInput;

            NavigationManager.NavigateTo($"/editor/{editorId}", replace: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error joining session: {ex.Message}");
            _isLoading = false;
        }
    }

    private async Task OnContentChanged(KeyboardEventArgs e)
    {
        if (_isProcessingChange || _editorState == null || !_isEditorReady)
        {
            return;
        }

        try
        {
            _isProcessingChange = true;
            await EditorService.UpdateEditorStateAsync(_editorState.Id, _content);
            _isProcessingChange = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending content update: {ex.Message}");
            _isProcessingChange = false;
        }
    }

    private async Task OnLanguageChangeAsync()
    {
        if (_editorState == null || !_isEditorReady)
        {
            return;
        }

        try
        {
            await EditorService.SetLanguageAsync(_editorState.Id, _selectedLanguage);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending language update: {ex.Message}");
        }
    }

    private async Task CopyContent()
    {
        await JSRuntime.InvokeVoidAsync("clipboardInterop.copyText", _content);
    }

    private async Task CutContent()
    {
        await JSRuntime.InvokeVoidAsync("clipboardInterop.copyText", _content);
        _content = string.Empty;

        if (_editorState != null)
        {
            await EditorService.UpdateEditorStateAsync(_editorState.Id, _content);
        }
    }

    private async Task DisconnectAndReset()
    {
        try
        {
            _syncTimer?.Dispose();
            _syncTimer = null;

            if (_editorState != null)
            {
                await EditorService.RemoveConnectedUserAsync(_editorState.Id, _userId);
            }

            _connectionStatus = "Disconnected";
            _editorState = null;
            _content = string.Empty;
            _selectedLanguage = "plaintext";

            NavigationManager.NavigateTo("/editor", replace: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error disconnecting: {ex.Message}");
        }
    }

    public void Dispose()
    {
        _syncTimer?.Dispose();
        
        if (_editorState != null && !string.IsNullOrEmpty(_userId))
        {
            Task.Run(async () => 
            {
                try 
                {
                    await EditorService.RemoveConnectedUserAsync(_editorState.Id, _userId);
                }
                catch 
                {
                }
            });
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(100);
            _isEditorReady = true;
        }
    }
}

<style>
    :root {
        --header-height: 50px;
    }

    .full-screen {
        position: fixed !important;
        top: 0 !important;
        left: 0 !important;
        right: 0 !important;
        bottom: 0 !important;
        width: 100vw !important;
        height: 100vh !important;
        margin: 0 !important;
        padding: 0 !important;
        overflow: hidden !important;
    }

    .main-container {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        height: 100vh;
        width: 100vw;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        width: 100%;
    }

    .spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        width: 36px;
        height: 36px;
        border-radius: 50%;
        border-left-color: #0366d6;
        animation: spin 1s linear infinite;
        margin-bottom: 15px;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .welcome-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        width: 100%;
        padding: 0;
        background-color: #f8f9fa;
    }

    .welcome-card {
        max-width: 500px;
        width: 100%;
        border-radius: 8px;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
        overflow: hidden;
        margin: 20px;
        background-color: white;
    }

    .welcome-header {
        background-color: #3c4b64;
        color: white;
        padding: 20px;
        text-align: center;
    }

    .welcome-header h1 {
        margin: 0;
        font-size: 28px;
    }

    .subtitle {
        margin-top: 5px;
        opacity: 0.8;
    }

    .welcome-body {
        padding: 0px;
        background-color: white;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 16px;
        box-sizing: border-box;
    }

    .language-dropdown {
        margin-bottom: 20px;
    }

    .btn-primary {
        background-color: #0366d6;
        color: white;
        border: none;
        padding: 12px 20px;
        font-size: 16px;
        border-radius: 5px;
        cursor: pointer;
        width: 100%;
    }

    .editor-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        width: 100%;
    }

    .editor-wrapper {
        display: flex;
        flex-direction: column;
        height: 100%;
        width: 100%;
    }

    .editor-header {
        height: var(--header-height);
        background-color: #1e1e1e;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 20px;
        color: white;
    }

    .header-left, .header-right {
        display: flex;
        align-items: center;
    }

    .session-info {
        display: flex;
        align-items: center;
    }

    .session-id {
        font-family: monospace;
        margin-right: 10px;
    }

    .connection-info {
        display: flex;
        align-items: center;
    }

    .connection-indicator {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 5px;
    }

    .connection-text {
        font-size: 12px;
        color: #aaa;
    }

    .connected {
        background-color: #28a745;
    }

    .disconnected {
        background-color: #dc3545;
    }

    .language-selector, .users-info, .cut-copy-buttons {
        margin-right: 20px;
    }

    .cut-copy-buttons {
        display: flex;
        gap: 10px;
    }

    .dark-select {
        background-color: #333;
        color: white;
        border: 1px solid #555;
        padding: 5px 10px;
        border-radius: 4px;
    }

    .users-count {
        background-color: #333;
        padding: 3px 8px;
        border-radius: 10px;
        font-size: 12px;
    }

    .btn-dark {
        background-color: #333;
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-exit {
        background-color: #dc3545;
    }

    .btn-blue {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
    }

    .editor-content {
        flex-grow: 1;
        height: calc(100% - var(--header-height));
        overflow: hidden;
        position: relative;
    }

    .code-editor {
        width: 100%;
        height: 100%;
        padding: 10px;
        background-color: #1e1e1e;
        color: white;
        font-family: 'Consolas', monospace;
        font-size: 14px;
        resize: none;
        border: none;
        outline: none;
        box-sizing: border-box;
    }

    .users-dropdown {
        position: relative;
        display: inline-block;
    }

    .users-dropdown:hover .dropdown-content {
        display: block;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        right: 0;
        background-color: #2d3748;
        min-width: 160px;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
        margin-top: 5px;
        border-radius: 4px;
    }

    .user-item {
        padding: 10px 15px;
        display: flex;
        align-items: center;
    }

    .user-icon {
        margin-right: 10px;
    }

    .user-name {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>